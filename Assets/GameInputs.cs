//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""GameMovement"",
            ""id"": ""5d904983-b6db-42c1-a3ac-515f957235e7"",
            ""actions"": [
                {
                    ""name"": ""RotateUP"",
                    ""type"": ""Button"",
                    ""id"": ""76f22641-c08e-4e92-bc6d-e7af2b54cfbe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateDown"",
                    ""type"": ""Button"",
                    ""id"": ""0c684402-3372-43c1-8a18-6b204099f2ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateLeft"",
                    ""type"": ""Button"",
                    ""id"": ""fa20a013-3c0b-4e0b-ae4c-b080c583e4c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateRight"",
                    ""type"": ""Button"",
                    ""id"": ""832a7b22-54d2-4860-bb70-f44f1a7678be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollPower"",
                    ""type"": ""Value"",
                    ""id"": ""55f234c2-3e52-4f57-924e-66d09b35e28e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""718dd7ca-442c-4dac-8aab-2044145597f7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateUP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87c4340d-0660-46ba-81c7-b2c53408b357"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27648d24-1e55-4b85-8ac2-3b1abd4a24d5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a928cdc-7d43-4342-84f1-5cc809924c8e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb35efe4-26a3-45bb-9b65-81e10962ee6f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""7caaaacc-c7d5-433f-b422-f369040dbd99"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollPower"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b8722ecb-739b-4c73-b002-5e006fbce28a"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0cdc00cb-a3ec-4181-80e9-a970ca3e741d"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameMovement
        m_GameMovement = asset.FindActionMap("GameMovement", throwIfNotFound: true);
        m_GameMovement_RotateUP = m_GameMovement.FindAction("RotateUP", throwIfNotFound: true);
        m_GameMovement_RotateDown = m_GameMovement.FindAction("RotateDown", throwIfNotFound: true);
        m_GameMovement_RotateLeft = m_GameMovement.FindAction("RotateLeft", throwIfNotFound: true);
        m_GameMovement_RotateRight = m_GameMovement.FindAction("RotateRight", throwIfNotFound: true);
        m_GameMovement_ScrollPower = m_GameMovement.FindAction("ScrollPower", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameMovement
    private readonly InputActionMap m_GameMovement;
    private IGameMovementActions m_GameMovementActionsCallbackInterface;
    private readonly InputAction m_GameMovement_RotateUP;
    private readonly InputAction m_GameMovement_RotateDown;
    private readonly InputAction m_GameMovement_RotateLeft;
    private readonly InputAction m_GameMovement_RotateRight;
    private readonly InputAction m_GameMovement_ScrollPower;
    public struct GameMovementActions
    {
        private @GameInputs m_Wrapper;
        public GameMovementActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateUP => m_Wrapper.m_GameMovement_RotateUP;
        public InputAction @RotateDown => m_Wrapper.m_GameMovement_RotateDown;
        public InputAction @RotateLeft => m_Wrapper.m_GameMovement_RotateLeft;
        public InputAction @RotateRight => m_Wrapper.m_GameMovement_RotateRight;
        public InputAction @ScrollPower => m_Wrapper.m_GameMovement_ScrollPower;
        public InputActionMap Get() { return m_Wrapper.m_GameMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameMovementActions set) { return set.Get(); }
        public void SetCallbacks(IGameMovementActions instance)
        {
            if (m_Wrapper.m_GameMovementActionsCallbackInterface != null)
            {
                @RotateUP.started -= m_Wrapper.m_GameMovementActionsCallbackInterface.OnRotateUP;
                @RotateUP.performed -= m_Wrapper.m_GameMovementActionsCallbackInterface.OnRotateUP;
                @RotateUP.canceled -= m_Wrapper.m_GameMovementActionsCallbackInterface.OnRotateUP;
                @RotateDown.started -= m_Wrapper.m_GameMovementActionsCallbackInterface.OnRotateDown;
                @RotateDown.performed -= m_Wrapper.m_GameMovementActionsCallbackInterface.OnRotateDown;
                @RotateDown.canceled -= m_Wrapper.m_GameMovementActionsCallbackInterface.OnRotateDown;
                @RotateLeft.started -= m_Wrapper.m_GameMovementActionsCallbackInterface.OnRotateLeft;
                @RotateLeft.performed -= m_Wrapper.m_GameMovementActionsCallbackInterface.OnRotateLeft;
                @RotateLeft.canceled -= m_Wrapper.m_GameMovementActionsCallbackInterface.OnRotateLeft;
                @RotateRight.started -= m_Wrapper.m_GameMovementActionsCallbackInterface.OnRotateRight;
                @RotateRight.performed -= m_Wrapper.m_GameMovementActionsCallbackInterface.OnRotateRight;
                @RotateRight.canceled -= m_Wrapper.m_GameMovementActionsCallbackInterface.OnRotateRight;
                @ScrollPower.started -= m_Wrapper.m_GameMovementActionsCallbackInterface.OnScrollPower;
                @ScrollPower.performed -= m_Wrapper.m_GameMovementActionsCallbackInterface.OnScrollPower;
                @ScrollPower.canceled -= m_Wrapper.m_GameMovementActionsCallbackInterface.OnScrollPower;
            }
            m_Wrapper.m_GameMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RotateUP.started += instance.OnRotateUP;
                @RotateUP.performed += instance.OnRotateUP;
                @RotateUP.canceled += instance.OnRotateUP;
                @RotateDown.started += instance.OnRotateDown;
                @RotateDown.performed += instance.OnRotateDown;
                @RotateDown.canceled += instance.OnRotateDown;
                @RotateLeft.started += instance.OnRotateLeft;
                @RotateLeft.performed += instance.OnRotateLeft;
                @RotateLeft.canceled += instance.OnRotateLeft;
                @RotateRight.started += instance.OnRotateRight;
                @RotateRight.performed += instance.OnRotateRight;
                @RotateRight.canceled += instance.OnRotateRight;
                @ScrollPower.started += instance.OnScrollPower;
                @ScrollPower.performed += instance.OnScrollPower;
                @ScrollPower.canceled += instance.OnScrollPower;
            }
        }
    }
    public GameMovementActions @GameMovement => new GameMovementActions(this);
    public interface IGameMovementActions
    {
        void OnRotateUP(InputAction.CallbackContext context);
        void OnRotateDown(InputAction.CallbackContext context);
        void OnRotateLeft(InputAction.CallbackContext context);
        void OnRotateRight(InputAction.CallbackContext context);
        void OnScrollPower(InputAction.CallbackContext context);
    }
}
